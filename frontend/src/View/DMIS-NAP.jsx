import React, { useEffect, useState ,useRef ,useCallback } from 'react';
import { ScaleLoader } from 'react-spinners';
import StatCard from '../components/StatCard';
import DateRangeFilter from '../components/DateSelect';
import NameTypeSelect from '../components/NameTypeSelect';
import PayTypeSelect from '../components/PayTypeSelect';
import HmainSelect from '../components/HmainSelect';
import { FaEraser } from 'react-icons/fa';
import PeriodSelect from '../components/PeriodSelect';
import AffiliationSelect from '../components/AffiliationSelect';
import AmpurSelect from '../components/AmpurSelect';
import { API } from '../api';
import CustomTable from '../components/Table';
import { FiFilter } from 'react-icons/fi';
import CustomChart from '../components/Chart';
import TableListAllCountNameType from '../components/TableListAllCountNameType';
import { AlertCircle } from "lucide-react";
export default function DMIS_NAP() {
const defaultFilters = {
  dateRange: {
    startMonthName: '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°',
    startYear: '2568',
    endMonthName: '',
    endYear: '', 
    startDate: null,  // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    endDate: null     // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  },
  nameType: [],
  type_pay: [],
  HmainOP: [],
  period: [],
  type_affiliation: [],
  name_Ampur: [], // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

};



 const abortControllerRef = useRef(null);

  const [mode, setMode] = useState('hmain');
  const [initialLoadDone, setInitialLoadDone] = useState(false);
  const [loading, setLoading] = useState(false);
  const [filteredData, setFilteredData] = useState(null);
  const [filteredDataDetail, setFilteredDataDetail] = useState(null);
  const [filters, setFilters] = useState(defaultFilters);
  const [list, setlist] = useState([]); // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö nameType
  const [list_hamin, setlist_hamin] = useState([]); // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hmainOP

   const fetchAppointments = useCallback(async () => {
    // 3.1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Loading ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    setLoading(true);

    setFilteredData(null);
    setFilteredDataDetail(null);
    // 3.2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ AbortController: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Request ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (abortControllerRef.current) {
      abortControllerRef.current.abort(); // ‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Request ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
    }

    // 3.3. ‡∏™‡∏£‡πâ‡∏≤‡∏á AbortController ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Request ‡∏ô‡∏µ‡πâ
    abortControllerRef.current = new AbortController();
    const signal = abortControllerRef.current.signal; // ‡∏î‡∏∂‡∏á signal ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Request

    try {
      const requestParams = {
        start_month: filters.dateRange.startMonthName,
        start_year: filters.dateRange.startYear,
        end_month: filters.dateRange.endMonthName,
        end_year: filters.dateRange.endYear,
        'name_type[]': filters.nameType,
        'type_pay[]': filters.type_pay,
        'HmainOP[]': filters.HmainOP,
        'period[]': filters.period,
        'type_affiliation[]': filters.type_affiliation,
        'name_Ampur[]': filters.name_Ampur,
        
      };


      
      const options = { signal };

      console.log("Request Params:", requestParams); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Request Params ‡πÉ‡∏ô Console
   

      const responsedSummary = await API.DMIS_NAP.getDMIS_NAP_Summary(requestParams, options); 
      const responsedeatailData = await API.DMIS_NAP.getDMIS_NAP_Detail(requestParams, options);
      const ListNameType = await API.DMIS_NAP.getDMIS_NAP_ListNameType(options);  // <-- ‡∏™‡πà‡∏á options ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      const list_hmainOP = await API.DMIS_NAP.getDMIS_NAP_LlistHaminaOP(options); // <-- ‡∏™‡πà‡∏á options ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
     
 
      setFilteredDataDetail(responsedeatailData.data.data);
      setFilteredData(responsedSummary.data.data);
      setlist(ListNameType.data.data)
      setlist_hamin(list_hmainOP.data.data); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hmainOP ‡∏•‡∏á‡πÉ‡∏ô state
    
 

      // 3.5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Request ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ Set State
      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error "Can't perform a React state update on an unmounted component"
      // ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ Set State ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏¢
      if (!signal.aborted) {
        setFilteredData(responsedSummary.data.data);
        setFilteredDataDetail(responsedeatailData.data.data);
        setlist(ListNameType.data.data)
        setlist_hamin(list_hmainOP.data.data);
        setInitialLoadDone(true); 
      }

    } catch (error) {
      // 3.6. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Error ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Request ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (error.name === 'AbortError') {
        console.log('Fetch aborted by user action (new filter applied).');
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á Error ‡∏ö‡∏ô UI ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
      } else {
        console.error("Error fetching appointments:", error);
        // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ö‡∏ô UI ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      }
    } finally {
      // 3.7. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Loading ‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏™‡∏°‡∏≠
      // ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î UI ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
      setLoading(false);
      // 3.8. ‡∏•‡πâ‡∏≤‡∏á AbortController ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Request ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß)
      // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Request ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à
      abortControllerRef.current = null;
    }
  }, [filters]); // Dependency array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö useCallback: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ filters ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô



useEffect(() => {
  fetchAppointments(); 
}, []); 


 const resetFilters = () => {
  setFilters({
    ...defaultFilters,
    dateRange: {
      ...defaultFilters.dateRange,
      startDate: null,
      endDate: null
    }
  });
 };
  const handleNameTypeChange = (newSelectedNameTypes) => {
    setFilters(prev => ({ ...prev, nameType: newSelectedNameTypes }));
  };
  const handlePayTypeChange = (newSelectedPayType) => {
    setFilters(prev => ({ ...prev, type_pay: newSelectedPayType }));
  };
  const handleHmainOPChange = (newSelectedHmainOP) => {
    setFilters(prev => ({ ...prev, HmainOP: newSelectedHmainOP }));
  };
  const handlePeriodChange = (newSelectedPeriod) => {
    setFilters(prev => ({ ...prev, period: newSelectedPeriod }));
  };
  const handleDateRangeChange = ({ startMonthName, startYear, endMonthName, endYear }) => {
    setFilters(prev => ({
      ...prev,
      dateRange: { startMonthName, startYear, endMonthName, endYear }
    }));
  };
const handleAffiliationChange = (newSelectedAffiliation) => {
  setFilters(prev => ({
    ...prev,
    type_affiliation: newSelectedAffiliation,
    name_Ampur: []  // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  }));
};
const handleAmpurChange = (newSelectedAmpur) => {
  setFilters(prev => ({ ...prev, name_Ampur: newSelectedAmpur }));
};


  return (
    <div className="p-6 bg-gradient-to-br from-blue-400 via-blue-100 to-blue-200 min-h-screen relative">
      <div className="absolute top-1/4 left-1/4 w-72 h-72 bg-blue-400 opacity-30 rounded-full mix-blend-multiply filter blur-xl animate-blob"></div>
      <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-400 opacity-30 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-2000"></div>
      <div className="absolute top-1/2 right-1/4 w-64 h-64 bg-green-400 opacity-30 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-4000"></div>

      <h1 className="text-3xl font-bold text-white mb-6 z-10 relative">üß¨ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DMIS NAP ‡πÄ‡∏≠‡∏î‡∏™‡πå</h1>

      <div className="relative z-10 mb-6">
        
 {/* ‚úÖ Overlay Loading ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á 
  {loading && (
    <div className="absolute inset-0 bg-white/60 backdrop-blur-xs z-50 flex items-center justify-center pointer-events-auto rounded-lg">
      <div className="flex flex-col items-center">
        <ScaleLoader color="#2593da" />
        <p className="mt-4 text-gray-700 text-lg font-semibold">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
        <p className="text-gray-600 text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      </div>
    </div>
  )}*/}

       
               <div className="bg-white/80 backdrop-blur-md rounded-lg shadow-xl p-4">
                {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
                 <div className="flex items-center mb-4 pb-2 border-b border-gray-200">
                   <FiFilter className="text-blue-600 text-2xl mr-2" />
                   <h2 className="text-xl font-semibold text-gray-800">‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>
                 </div>
       
                 
                   {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ */}
                   <div className="grid gap-4 mb-6">
                     <DateRangeFilter
                       onDateRangeChange={handleDateRangeChange}
                       initialStartDate={filters.dateRange.startDate}
                       initialEndDate={filters.dateRange.endDate}
                     />
                     <div className="grid md:grid-cols-3 gap-4">
                     <NameTypeSelect value={filters.nameType} onChange={handleNameTypeChange} options={list} />
                     <PeriodSelect value={filters.period} onChange={handlePeriodChange} />
                     <PayTypeSelect value={filters.type_pay} onChange={handlePayTypeChange} />
                     </div>
                   </div>
                 
               
       
                {/* Toggle ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• */}
                 <div className="mb-6">
                   <h2 className="text-sm text-gray-700 mb-2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•</h2>
                   <div className="flex gap-4 mb-4">
                     <label className="flex items-center gap-2">
                      <input
                 type="radio"
                 name="filterMode"
                 value="hmain"
                 checked={mode === 'hmain'}
                 onChange={() => setMode('hmain')}
               />
                       ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡πà‡∏Ç‡πà‡∏≤‡∏¢
                     </label>
                     <label className="flex items-center gap-2">
                 <input
                 type="radio"
                 name="filterMode"
                 value="area"
                 checked={mode === 'area'}
                 onChange={() => setMode('area')}
               />
                       ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
                     </label>
                   </div>
               
                   {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡πà‡∏Ç‡πà‡∏≤‡∏¢ */}
                   {mode === 'hmain' && (
                     <div className="grid md:grid-cols-1 gap-4">
                       <HmainSelect value={filters.HmainOP} onChange={handleHmainOPChange} ListFiltter={list_hamin} />
                       
                     </div>
                   )}
               
                   {/* ‡∏Å‡∏•‡∏∏‡πà‡∏°: ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á */}
                   {mode === 'area' && (
                     <div className="grid md:grid-cols-3 gap-4">
                     <AffiliationSelect  value={filters.type_affiliation} onChange={handleAffiliationChange} />
                     <AmpurSelect value={filters.name_Ampur} onChange={handleAmpurChange} typeAffiliations={filters.type_affiliation} />
                     </div>
                   )}
                 </div>
       
           
       
       
                 
                   {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á */}
                  <div className="mt-6 flex items-center gap-4">
                   <button
                     onClick={fetchAppointments}
                     className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                   >
                     üîç ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                   </button>
                   <button
                     onClick={resetFilters}
                     className="flex items-center gap-2 bg-white text-red-500 px-4 py-2 rounded-lg hover:bg-red-600 hover:text-white transition-colors border border-red-500"
                   >
                     <FaEraser />
                     ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                   </button>
                   
                 </div>
               </div>
       

      </div>

      <div className="relative z-10 bg-white/30 backdrop-blur-xl rounded-2xl p-6 shadow-2xl border border-white/20 min-h-[500px] flex items-center justify-center">
            
          {loading && (
       <div className="absolute inset-0 bg-white/60 backdrop-blur-xs z-50 flex items-center justify-center pointer-events-auto rounded-lg">
         <div className="flex flex-col items-center">
           <ScaleLoader color="#2593da" />
           <p className="mt-4 text-gray-700 text-lg font-semibold">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
           <p className="text-gray-600 text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
         </div>
       </div>
     )}
     
     {!loading && !initialLoadDone && (
       <div className="p-4 text-center text-gray-700">
         <p className="text-lg text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...</p>
       </div>
     )}
     
     {!loading && initialLoadDone && (!filteredData || filteredData.length === 0) && (
       <div className="p-4 text-center text-gray-700">
  <div className="flex flex-col items-center justify-center">
    <AlertCircle className="w-12 h-12 text-gray-400 mb-3" />
    <p className="text-xl font-semibold mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
    <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
  </div>
</div>
     )}
     
     {!loading && initialLoadDone && filteredData && filteredData.length > 0 && (
       <div className="w-full">
         <div className="flex flex-col md:flex-row gap-4 mb-4">
           <div className="bg-white/50 backdrop-blur-sm md:w-[32%] p-4 rounded-lg shadow-lg">
             <CustomChart data={filteredData} />
           </div>
           <div className="backdrop-blur-sm md:w-[68%] p-4 rounded-lg shadow-lg">
             <TableListAllCountNameType data={filteredData} />
           </div>
         </div>
     
         <div className="flex flex-col gap-4">
           <div className="bg-white/50 backdrop-blur-sm p-4 rounded-lg shadow-lg flex-grow">
             <CustomTable data={filteredDataDetail} />
               <p className="text-base text-gray-600 mt-4">
      ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• :{" "}
      <a
        href="https://seamlessfordmis.nhso.go.th/seamlessfordmis/"
        target="_blank"
        rel="noopener noreferrer"
        className="text-blue-600 hover:underline"
      >
        https://seamlessfordmis.nhso.go.th/seamlessfordmis/
      </a>
    </p>
           </div>
         </div>
       </div>
     )}
     
     
     
     
           </div>
    </div>
  );
}
