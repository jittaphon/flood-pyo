import { useEffect, useState } from "react";
import React from "react";
import Papa from 'papaparse';
import { motion } from "framer-motion";
import StatCard from "../components/StatCard"; // üëà import ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
import PhayaoMap from "../components/Map";
export default function HomePage() {
  const [rawData, setRawData] = useState([]);
  const [processedData, setProcessedData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSHP-40KTigcsNS4ZZH5LizIrWf8HXH9OpmH0P9X9_JFfxPed5b87wg_Ow_Em1STHa-wFgWyztAOKr1/pub?output=csv';

    Papa.parse(url, {
      download: true,
      header: false, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ header auto ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ merged cells
      skipEmptyLines: true,
      complete: (results) => {

        setRawData(results.data);
        
        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const processed = processFloodData(results.data);
        setProcessedData(processed);
        setLoading(false);
      },
      error: (err) => {
        console.error('Error parsing CSV:', err);
        setError(err.message);
        setLoading(false);
      },
    });
  }, []);

const columnMap = {
  A: "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠",
  B: "‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  C: "‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏∞‡∏™‡∏°",
  D: "‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  E: "‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏™‡∏∞‡∏™‡∏°",
  F: "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  G: "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏∞‡∏™‡∏°",
  H: "‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  I: "‡∏£‡∏ß‡∏°‡∏™‡∏∞‡∏™‡∏°",
  J: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö) ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•",
  K: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
  L: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≥‡∏ö‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
  M: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
  N: "‡∏£‡∏û‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  O: "‡∏£‡∏û‡∏™‡∏ï‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  P: "‡∏™‡∏™‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  Q: "‡∏£‡∏û‡∏™‡∏∞‡∏™‡∏°",
  R: "‡∏£‡∏û‡∏™‡∏ï‡∏™‡∏∞‡∏™‡∏°",
  S: "‡∏™‡∏™‡∏≠‡∏™‡∏∞‡∏™‡∏°",
  T: "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
  U: "‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
  V: "‡∏Ñ‡∏£‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
  W: "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
  X: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á",
  Y: "‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á",
  Z: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á",
  AA: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
  AB: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå‡∏ó‡∏µ‡πà ‡∏™‡∏∞‡∏™‡∏°",
  AC: "‡πÄ‡∏î‡πá‡∏Å 0-12 ‡∏õ‡∏µ_‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
  AD: "‡πÄ‡∏î‡πá‡∏Å 0-12 ‡∏õ‡∏µ_‡∏™‡∏∞‡∏™‡∏°",
  AE: "‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ 60 ‡∏õ‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ_‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
  AF: "‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ 60 ‡∏õ‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ_‡∏™‡∏∞‡∏™‡∏°",
  AG: "‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£_‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
  AH: "‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£_‡∏™‡∏∞‡∏™‡∏°",
  AI: "‡∏ï‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô_‡∏ï‡∏¥‡∏î‡πÄ‡∏ï‡∏µ‡∏¢‡∏á_‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
  AJ: "‡∏ï‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô_‡∏ï‡∏¥‡∏î‡πÄ‡∏ï‡∏µ‡∏¢‡∏á_‡∏™‡∏∞‡∏™‡∏°",
  AK: "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ_‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
  AL: "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ_‡∏™‡∏∞‡∏™‡∏°",
  AM: "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏ß‡∏°_‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  AN: "‡∏ö‡∏≤‡∏Å‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏ß‡∏°_‡∏™‡∏∞‡∏™‡∏°",
  AO: "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á_‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  AP: "‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á_‡∏™‡∏∞‡∏™‡∏°",
  AQ: "‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ñ‡∏∂‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á_‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  AR: "‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ñ‡∏∂‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á_‡∏™‡∏∞‡∏™‡∏°",
  AS: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏_(‡∏ú‡∏π‡πâ‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö)",
  AT: "‡∏´‡∏ç‡∏¥‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå_‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ(‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á)",
  AU: "‡∏´‡∏ç‡∏¥‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå_‡∏™‡∏∞‡∏™‡∏°(‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á)",
  AV: "‡∏ï‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô/‡∏ï‡∏¥‡∏î‡πÄ‡∏ï‡∏µ‡∏¢‡∏á_‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ(‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á)",
  AW: "‡∏ï‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô/‡∏ï‡∏¥‡∏î‡πÄ‡∏ï‡∏µ‡∏¢‡∏á_‡∏™‡∏∞‡∏™‡∏°(‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á)",
  AX: "‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏_‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ(‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á)",
  AY: "‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏_‡∏™‡∏∞‡∏™‡∏°(‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á)",
  AZ: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢(‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)_‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
  BA: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢(‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)_‡∏™‡∏∞‡∏™‡∏°",
  BB: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢(‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡πá‡∏Å 0-12 ‡∏õ‡∏µ ‡∏™‡∏∞‡∏™‡∏°",
  BC: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢(‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå‡∏™‡∏∞‡∏™‡∏°",
  BD: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢(‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ 60 ‡∏õ‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏™‡∏∞‡∏™‡∏°",
  BE: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢(‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏™‡∏°",
  BF: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢(‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ï‡∏¥‡∏î‡∏ö‡πâ‡∏≤‡∏ô/‡∏ï‡∏¥‡∏î‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡∏™‡∏∞‡∏™‡∏°",
  BG: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢(‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏™‡∏∞‡∏™‡∏°",
  BH: "MERT",
  BI: "Mini MERT",
  BJ: "SEhRT",
  BK: "CDCU",
  BL: "SRRT",
  BM: "‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û ‡∏Å‡∏π‡πâ‡∏†‡∏±‡∏¢)",
  BN: "‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡∏°",
  BO: "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô",
  BP: "‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤",
  BQ: "‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
  BR: "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï",
  BS: "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠",
  BT: "‡∏°‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°V_clean",
  BU: "‡∏°‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏¢‡∏≤‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå",
  BV: "leptospirosis_today",
  BW: "leptospirosis_accumulated",
  BX: "dengue_fever_today",
  BY: "dengue_fever_accumulated",
  BZ: "food_poisoning_diarrhea_today",
  CA: "food_poisoning_diarrhea_accumulated",
  CB: "influenza_today",
  CC: "influenza_accumulated",
  CD: "Respiritory_tract_infection_URI_today",
  CE: "Respiritory_tract_infection_URI_accumulated",
  CF: "Respiritory_tract_infection_penumonia_today",
  CG: "Respiritory_tract_infection_penumonia_accumulated",
};


const mappedData = processedData.map(row => {
  const newRow = {};
  for (const key in row) {
    const newKey = columnMap[key] || key; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô map ‡∏Å‡πá‡πÉ‡∏ä‡πâ key ‡πÄ‡∏î‡∏¥‡∏°
    newRow[newKey] = row[key];
  }
  return newRow;
});



// ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ó‡∏±‡πâ‡∏á ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ + ‡∏™‡∏∞‡∏™‡∏°
const totals = mappedData.reduce(
  (acc, row) => {
    acc.dead.today += Number(row["‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"] || 0);
    acc.dead.total += Number(row["‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏∞‡∏™‡∏°"] || 0);

    acc.missing.today += Number(row["‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"] || 0);
    acc.missing.total += Number(row["‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏™‡∏∞‡∏™‡∏°"] || 0);

    acc.injured.today += Number(row["‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"] || 0);
    acc.injured.total += Number(row["‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏∞‡∏™‡∏°"] || 0);

    acc.all.today += Number(row["‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"] || 0);
    acc.all.total += Number(row["‡∏£‡∏ß‡∏°‡∏™‡∏∞‡∏™‡∏°"] || 0);

    return acc;
  },
  {
    dead: { today: 0, total: 0 },
    missing: { today: 0, total: 0 },
    injured: { today: 0, total: 0 },
    all: { today: 0, total: 0 },
  }
);




  const processFloodData = (data) => {
    try {
      // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á merged cells)
      let dataStartRow = -1;
      let headers = [];
      
      // ‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠" (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 5 ‡∏ï‡∏≤‡∏° index 0)
      for (let i = 0; i < data.length; i++) {
        if (data[i] && data[i][0] && data[i][0].includes('‡∏≠‡∏≥‡πÄ‡∏†‡∏≠')) {
          dataStartRow = i + 1; // ‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          headers = data[i];
          break;
        }
      }

      if (dataStartRow === -1) {
        console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á');
        return [];
      }

     

const indexToLetter = (index) => {
  let letter = '';
  while (index >= 0) {
    letter = String.fromCharCode((index % 26) + 65) + letter;
    index = Math.floor(index / 26) - 1;
  }
  return letter;
};

// ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏ä‡∏∑‡πà‡∏≠ header
const cleanHeaders = headers.map((header, index) => indexToLetter(index));


      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
      const processedRows = [];
      
      for (let i = dataStartRow; i < data.length; i++) {
        const row = data[i];
        if (!row || !row[0] || row[0].trim() === '') {
          continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á
        }

        const processedRow = {};
        cleanHeaders.forEach((header, index) => {
          const value = row[index] || '';
          // ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
          const numValue = parseFloat(value);
          processedRow[header] = !isNaN(numValue) && value !== '' ? numValue : value;
        });

        processedRows.push(processedRow);
      }


      return processedRows;
    } catch (error) {
      console.error('Error processing data:', error);
      return [];
    }
  };

  const welcomeVariants = {
    hidden: {
      opacity: 0,
      transform: "translateY(-20px)",
      filter: "blur(4px)"
    },
    visible: {
      opacity: 1,
      transform: "translateY(0px)",
      filter: "blur(0px)",
      transition: {
        duration: 0.6,
        ease: [0.25, 0.46, 0.45, 0.94]
      }
    },
  };

  const containerVariants = {
    hidden: { opacity: 1 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.08,
        delayChildren: 0.3,
      },
    },
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-white">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-blue-600 font-medium">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-white">
        <div className="text-center p-6 bg-red-50 rounded-lg border border-red-200">
          <p className="text-red-600 font-medium mb-2">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</p>
          <p className="text-red-500 text-sm">{error}</p>
        </div>
      </div>
    );
  }

  
  return (
    <div
      className="relative min-h-screen flex flex-col items-center justify-start pt-8 sm:pt-16 md:pt-20 px-4 sm:px-6 bg-gradient-to-br from-blue-50 to-white overflow-hidden"
      style={{
        transform: 'translateZ(0)',
        backfaceVisibility: 'hidden',
        perspective: '1000px'
      }}
    >
      {/* Background Blobs */}
      <div
        className="absolute -top-24 -left-24 w-80 h-80 sm:w-96 sm:h-96 bg-blue-600 opacity-30 blur-3xl rounded-full"
        style={{
          animation: 'pulse 4s ease-in-out infinite',
          transform: 'translateZ(0)'
        }}
      />
      <div
        className="absolute -bottom-24 -right-24 w-80 h-80 sm:w-96 sm:h-96 bg-teal-600 opacity-30 blur-3xl rounded-full"
        style={{
          animation: 'pulse 4s ease-in-out infinite 2s',
          transform: 'translateZ(0)'
        }}
      />

      {/* Title */}
      <motion.h1
        className="text-xl sm:text-2xl md:text-3xl font-bold text-blue-800 mb-6 sm:mb-8 text-center px-2"
        variants={welcomeVariants}
        initial="hidden"
        animate="visible"
        style={{
          transform: 'translateZ(0)',
          backfaceVisibility: 'hidden'
        }}
      >
       üåßÔ∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏∏‡∏ó‡∏Å‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2568
      </motion.h1>

     <motion.div
  className="backdrop-blur-xl bg-white/10 border border-white/20 rounded-2xl sm:rounded-3xl shadow-2xl p-4 sm:p-6 w-full max-w-none mx-4
            grid grid-cols-[1fr_1.5fr] gap-4 w-full gap-4"
  variants={containerVariants}
  initial="hidden"
  animate="visible"
  style={{ transform: 'translateZ(0)', backfaceVisibility: 'hidden' }}
>

  {/* Row 1 - Equal columns */}
  <div className="flex flex-col items-center gap-6 py-6  col-span-1 ">

    <h2 className="text-2xl  font-bold mb-3 text-gray-800">
      ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏û‡∏∞‡πÄ‡∏¢‡∏≤ (‡∏™‡∏∞‡∏™‡∏°)
  </h2>
      {/* ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å: ‡∏Å‡∏≤‡∏£‡πå‡∏î */}
      <motion.div
        className="grid grid-cols-2 sm:grid-cols-4 gap-4 w-full "
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <StatCard
          title="‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"
          total={totals.dead.total}
          today={totals.dead.today}
          color="bg-red-300"
        />
        <StatCard
          title="‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢"
          total={totals.missing.total}
          today={totals.missing.today}
          color="bg-yellow-300"
        />
        <StatCard
          title="‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö"
          total={totals.injured.total}
          today={totals.injured.today}
          color="bg-orange-300"
        />
        <StatCard
          title="‡∏£‡∏ß‡∏°"
          total={totals.all.total}
          today={totals.all.today}
          color="bg-blue-300"
        />
      </motion.div>

      {/* ‡πÅ‡∏ñ‡∏ß‡∏™‡∏≠‡∏á: ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
      <div className="w-full  overflow-x-auto">
          {/* ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
  <h2 className="text-lg sm:text-xl font-bold mb-3 text-gray-800">
    üìù ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ (‡∏™‡∏∞‡∏™‡∏°)
  </h2>

  <table className="min-w-full rounded-xl overflow-hidden shadow-xl backdrop-blur-xl bg-white/30 border border-white/20">
  <thead>
    <tr className="bg-gradient-to-r from-blue-500/80 to-blue-300/80 text-white">
      <th className="px-4 py-3 text-left">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</th>
      <th className="px-4 py-3 text-center">‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï</th>
      <th className="px-4 py-3 text-center">‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢</th>
      <th className="px-4 py-3 text-center">‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö</th>
      <th className="px-4 py-3 text-center">‡∏£‡∏ß‡∏°</th>
    </tr>
  </thead>
  <tbody>
    {mappedData.map((row, index) => (
      <tr
        key={index}
        className={`transition ${
          index % 2 === 0 ? "bg-white/60" : "bg-white/40"
        } hover:bg-blue-200 hover:shadow-lg`}
      >
        <td className="px-4 py-2 border-b">{row.‡∏≠‡∏≥‡πÄ‡∏†‡∏≠}</td>
        <td className="px-4 py-2 border-b text-center text-red-600 font-semibold">
          {row.‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏∞‡∏™‡∏°}
        </td>
        <td className="px-4 py-2 border-b text-center text-yellow-600 font-semibold">
          {row.‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏™‡∏∞‡∏™‡∏°}
        </td>
        <td className="px-4 py-2 border-b text-center text-orange-600 font-semibold">
          {row.‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏∞‡∏™‡∏°}
        </td>
        <td className="px-4 py-2 border-b text-center text-blue-700 font-bold">
          {row.‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏∞‡∏™‡∏° + row.‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏™‡∏∞‡∏™‡∏° + row.‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏™‡∏∞‡∏™‡∏°}
        </td>
      </tr>
    ))}
  </tbody>
</table>

      </div>


    </div>

  <div className="bg-white/20 rounded-lg p-4 col-span-2">
    <PhayaoMap />
  </div>
  {/* Row 2 - Equal columns */}
<div className="w-full overflow-x-auto py-6 col-span-3 ">

    <h2 className="text-lg sm:text-xl font-bold mb-3 text-gray-800">
      üèïÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö (‡∏™‡∏∞‡∏™‡∏°)
    </h2>

    <table className="min-w-full rounded-xl overflow-hidden 
                      shadow-lg bg-white/70 border border-gray-200">
      <thead>
        <tr className="bg-gradient-to-r from-amber-800/90 to-yellow-600/80 text-white shadow-md">
          <th className="px-4 py-3 text-left">üìç ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</th>
          {mappedData.map((row, index) => (
            <th key={index} className="px-4 py-3 text-center">
              {row.‡∏≠‡∏≥‡πÄ‡∏†‡∏≠}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {/* ‡πÅ‡∏ñ‡∏ß 1: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á */}
        <tr className="bg-white/60 hover:bg-yellow-200 transition">
          <td className="px-4 py-2 border-b font-semibold text-gray-800">
            üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á
          </td>
          {mappedData.map((row, index) => (
            <td
              key={index}
              className="px-4 py-2 border-b text-center text-emerald-700 font-semibold"
            >
              {row.‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á || 0}
            </td>
          ))}
        </tr>

        {/* ‡πÅ‡∏ñ‡∏ß 2: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á */}
        <tr className="bg-white/40 hover:bg-yellow-200 transition">
          <td className="px-4 py-2 border-b font-semibold text-gray-800">
            üè† ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á
          </td>
          {mappedData.map((row, index) => (
            <td
              key={index}
              className="px-4 py-2 border-b text-center text-blue-700 font-semibold"
            >
              {row.‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏û‡∏±‡∏Å‡∏û‡∏¥‡∏á || 0}
            </td>
          ))}
        </tr>
      </tbody>
    </table>

</div>

  {/* Row 3 - Equal columns */}
<div className="w-full overflow-x-auto py-6 col-span-3">
  <h2 className="text-lg sm:text-xl font-bold mb-3 text-gray-800">
   üßç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡πÄ‡∏•‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç (‡∏™‡∏∞‡∏™‡∏°)
  </h2>

<table className="min-w-full rounded-xl overflow-hidden backdrop-blur-xl bg-white/30 border border-white/20">
  <thead>
    <tr className="bg-gradient-to-r from-blue-500/80 to-blue-300/80 text-white">
      <th className="px-4 py-3 text-left">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</th>
      <th className="px-4 py-3 text-center">‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô</th>
      <th className="px-4 py-3 text-center">‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤</th>
      <th className="px-4 py-3 text-center">‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤</th>
      <th className="px-4 py-3 text-center">‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï</th>
      <th className="px-4 py-3 text-center">‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠</th>
      <th className="px-4 py-3 text-center">‡∏°‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏î‡∏π‡πÅ‡∏• ‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°/ V-clean</th>
      <th className="px-4 py-3 text-center">‡∏°‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏¢‡∏≤‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå</th>
    </tr>
  </thead>

  <tbody>
    {mappedData.map((row, index) => (
      <tr
        key={index}
        className={`transition ${
          index % 2 === 0 ? "bg-white/60" : "bg-white/40"
        } hover:bg-blue-200 hover:shadow-lg`}
      >
        <td className="px-4 py-2 border-b">{row.‡∏≠‡∏≥‡πÄ‡∏†‡∏≠}</td>
        <td className="px-4 py-2 border-b text-center font-semibold">
          {row.‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô}
        </td>
        <td className="px-4 py-2 border-b text-center font-semibold">
          {row.‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤}
        </td>
        <td className="px-4 py-2 border-b text-center font-semibold">
          {row.‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤}
        </td>
        <td className="px-4 py-2 border-b text-center font-semibold">
          {row.‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï}
        </td>
        <td className="px-4 py-2 border-b text-center font-semibold">
          {row.‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠}
        </td>
        <td className="px-4 py-2 border-b text-center font-semibold">
          {row.‡∏°‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°V_clean}
        </td>
        <td className="px-4 py-2 border-b text-center font-semibold">
          {row.‡∏°‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏¢‡∏≤‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå}
        </td>
      </tr>
    ))}
  </tbody>

  {/* ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏° */}
  <tfoot>
    <tr className="bg-gradient-to-r from-blue-400/70 to-blue-200/70 font-bold text-gray-900">
      <td className="px-4 py-2 text-left">‡∏£‡∏ß‡∏°</td>
      <td className="px-4 py-2 text-center">
        {mappedData.reduce((sum, row) => sum + (Number(row.‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô) || 0), 0)}
      </td>
      <td className="px-4 py-2 text-center">
        {mappedData.reduce((sum, row) => sum + (Number(row.‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤) || 0), 0)}
      </td>
      <td className="px-4 py-2 text-center">
        {mappedData.reduce((sum, row) => sum + (Number(row.‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤) || 0), 0)}
      </td>
      <td className="px-4 py-2 text-center">
        {mappedData.reduce((sum, row) => sum + (Number(row.‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï) || 0), 0)}
      </td>
      <td className="px-4 py-2 text-center">
        {mappedData.reduce((sum, row) => sum + (Number(row.‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠) || 0), 0)}
      </td>
      <td className="px-4 py-2 text-center">
        {mappedData.reduce((sum, row) => sum + (Number(row.‡∏°‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°V_clean) || 0), 0)}
      </td>
      <td className="px-4 py-2 text-center">
        {mappedData.reduce((sum, row) => sum + (Number(row.‡∏°‡∏≠‡∏ö‡∏ä‡∏∏‡∏î‡∏¢‡∏≤‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå) || 0), 0)}
      </td>
    </tr>
  </tfoot>
</table>

</div>

  {/* Row 4 - Equal columns */}
<div className="w-full overflow-x-auto py-6 col-span-1">
  <h2 className="text-lg sm:text-xl font-bold mb-3 text-gray-800">
    üö£üèΩ‚Äç‚ôÇÔ∏è  ‡∏ó‡∏µ‡∏°‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç
  </h2>

  <table className="min-w-full border border-gray-300 rounded-xl shadow-md overflow-hidden">
    <thead>
      <tr className="bg-gradient-to-r from-green-400 to-green-200">
        <th className="px-4 py-3 text-left border-b font-semibold text-gray-800">
          ‡∏ó‡∏µ‡∏°
        </th>
        <th className="px-4 py-3 text-center border-b font-semibold text-gray-800">
          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        </th>
      </tr>
    </thead>
    <tbody>
      {["MERT", "Mini MERT", "SEhRT", "CDCU", "SRRT", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û ‡∏Å‡∏π‡πâ‡∏†‡∏±‡∏¢)"].map((team, index) => {
        const totalTeam = mappedData.reduce((sum, row) => {
          return sum + Number(row[team] || 0);
        }, 0);

        // ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û / ‡∏´‡∏°‡∏≠
    

        return (
          <tr key={team}
            className={`transition ${
          index % 2 === 0 ? "bg-white/60" : "bg-white/40"
        } hover:bg-green-200 hover:shadow-lg`}
          >
            <td className="px-4 py-2 border-b font-semibold">{team}</td>
            <td
              className={`px-4 py-2 border-b text-center font-bold `}
            >
              {totalTeam}
            </td>
          </tr>
        );
      })}
    </tbody>
  </table>
</div>

{/* Row 4 - Equal columns */}
<div className="w-full overflow-x-auto py-6 col-span-1">
  <h2 className="text-lg sm:text-xl font-bold mb-3 text-gray-800">
     üè• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö (‡∏™‡∏∞‡∏™‡∏°)
  </h2>

  <table className="min-w-full border border-gray-300 rounded-xl shadow-md overflow-hidden">
    <thead>
      <tr className="bg-gradient-to-r from-green-400 to-green-200">
        <th className="px-4 py-3 text-left border-b font-semibold text-gray-800">
          ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        </th>
        <th className="px-4 py-3 text-center border-b font-semibold text-gray-800">
          ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        </th>
      </tr>
    </thead>
    <tbody>
      {(() => {
        const labelMap = {
          "‡∏£‡∏û‡∏™‡∏∞‡∏™‡∏°": "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
          "‡∏£‡∏û‡∏™‡∏ï‡∏™‡∏∞‡∏™‡∏°": "‡∏£‡∏û.‡∏™‡∏ï.",
          "‡∏™‡∏™‡∏≠‡∏™‡∏∞‡∏™‡∏°": "‡∏™‡∏™‡∏≠"
        };

        return ["‡∏£‡∏û‡∏™‡∏∞‡∏™‡∏°", "‡∏£‡∏û‡∏™‡∏ï‡∏™‡∏∞‡∏™‡∏°", "‡∏™‡∏™‡∏≠‡∏™‡∏∞‡∏™‡∏°"].map((team, index) => {
          const totalTeam = mappedData.reduce(
            (sum, row) => sum + Number(row[team] || 0),
            0
          );

          return (
            <tr
              key={team}
              className={`transition ${
                index % 2 === 0 ? "bg-white/60" : "bg-white/40"
              } hover:bg-green-200 hover:shadow-lg`}
            >
              <td className="px-4 py-7 border-b font-semibold">
                {labelMap[team] || team}
              </td>
              <td className="px-4 py-2 border-b text-center font-bold">
                {totalTeam}
              </td>
            </tr>
          );
        });
      })()}
    </tbody>
  </table>
</div>










  {/* Row 3 - Equal columns */}
     </motion.div>
  <div className="mt-8 sm:mt-12 pb-8"></div>
    </div>
  );
}